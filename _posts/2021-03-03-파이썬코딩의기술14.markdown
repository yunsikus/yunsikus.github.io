---  
layout: post  
title: "[Effective Python] 14장. None을 반환하기보다는 예외를 일으키자"  
subtitle: "[Effective Python] 14장"  
categories: Development Python
tags: Python Effective 고급파이썬
comments: true  
---  

## 14. None을 반환하기보다는 예외를 일으키자.

`None`에 특별한 의미를 부여하는 경우 문제가 될 수 있는 상황들이 있다.
예를 들어, 다음과 같은 함수가 있다.
```python
def divide(a,b):
  try:
    return a / b
  except ZeroDivisionError:
    return None
```

이 함수를 사용하는 코드는 반환 값을 다음과 같이 해석합니다.

```python
result = divide(x,y)
if result is None:
  print("Invalid inputs")
```

하지만 만약 분자가 0이라면, 분모가 0이 아님에도 `반환값`이 0이 되어버립니다. 이 같은 상황을 줄이기 위해서는 `None`을 반환하기 보다는 `예외처리`를 일으키는 것이 좋습니다.

```python
def divide(a,b):
  try:
    return a/b
  except ZeroDivisionError as e:
    raise ValueError('Invlid inputs') from e
```

이제 함수를 호출하는 쪽에서는 반환 값을 조건식으로 검사할 필요가 없다. 함수가 예외를 일으키지 않았다면 반환 값은 문제가 없다. 예외를 처리하는 코드도 깔끔해집니다.

```python
x, y = 5, 2
try:
  result = divide(x,y)
except ValueError:
  print('Invalid inputs')
else:
  print('Result is {}'.format(result)) ## Result is 2.5
```

## 핵심정리
- 특별한 의미를 나타내려고 `None`을 반환하는 함수가 오류를 일으키기 쉬운 이유는 `None`이나 다른 값(예를 들면 0이나 빈 문자열)이 조건식에서 `False`로 평가되기 때문입니다. 

- 특별한 상황을 알릴 때 `None`을 반환하는 대신에 예외를 일으키는것이 좋습니다. 문서화가 되어 있다면 호출하는 코드에서 예외를 적절하게 처리할 것이라고 기대할 수 있습니다.  
