---
layout: post
title: "[Python] 14499 주사위굴리기"
subtitle: "[Python] 14499 주사위굴리기"
categories: Algorithm
tags: 시뮬레이션 simulation
comments: true


---
## [14499 주사위굴리기](https://www.acmicpc.net/problem/14499)

## 문제
크기가 N×M인 지도가 존재한다. 지도의 오른쪽은 동쪽, 위쪽은 북쪽이다. 이 지도의 위에 주사위가 하나 놓여져 있으며, 주사위의 전개도는 아래와 같다. 지도의 좌표는 (r, c)로 나타내며, r는 북쪽으로부터 떨어진 칸의 개수, c는 서쪽으로부터 떨어진 칸의 개수이다.

주사위는 지도 위에 윗 면이 1이고, 동쪽을 바라보는 방향이 3인 상태로 놓여져 있으며, 놓여져 있는 곳의 좌표는 (x, y) 이다. 가장 처음에 주사위에는 모든 면에 0이 적혀져 있다.

지도의 각 칸에는 정수가 하나씩 쓰여져 있다. 주사위를 굴렸을 때, 이동한 칸에 쓰여 있는 수가 0이면, 주사위의 바닥면에 쓰여 있는 수가 칸에 복사된다. 0이 아닌 경우에는 칸에 쓰여 있는 수가 주사위의 바닥면으로 복사되며, 칸에 쓰여 있는 수는 0이 된다.

주사위를 놓은 곳의 좌표와 이동시키는 명령이 주어졌을 때, 주사위가 이동했을 때 마다 상단에 쓰여 있는 값을 구하는 프로그램을 작성하시오.

주사위는 지도의 바깥으로 이동시킬 수 없다. 만약 바깥으로 이동시키려고 하는 경우에는 해당 명령을 무시해야 하며, 출력도 하면 안 된다.



## 입력
첫째 줄에 지도의 세로 크기 N, 가로 크기 M (1 ≤ N, M ≤ 20), 주사위를 놓은 곳의 좌표 x y(0 ≤ x ≤ N-1, 0 ≤ y ≤ M-1), 그리고 명령의 개수 K (1 ≤ K ≤ 1,000)가 주어진다.

둘째 줄부터 N개의 줄에 지도에 쓰여 있는 수가 북쪽부터 남쪽으로, 각 줄은 서쪽부터 동쪽 순서대로 주어진다. 주사위를 놓은 칸에 쓰여 있는 수는 항상 0이다. 지도의 각 칸에 쓰여 있는 수는 10을 넘지 않는 자연수 또는 0이다.

마지막 줄에는 이동하는 명령이 순서대로 주어진다. 동쪽은 1, 서쪽은 2, 북쪽은 3, 남쪽은 4로 주어진다.

## 출력
이동할 때마다 주사위의 윗 면에 쓰여 있는 수를 출력한다. 만약 바깥으로 이동시키려고 하는 경우에는 해당 명령을 무시해야 하며, 출력도 하면 안 된다.

## 풀이

주사위를 굴리면서 주사위 번호들이 변경되는 점을 구현해야 합니다.
각 움직임 별로 다음과 같이 변경될 것입니다.

```
  2                    6              1             
 413      ->           423            453           
  5                    1              6             
  6                    5              2             

                      (up)          (down)     

[2,4,1,3,5,6]       [6,4,2,3,1,5]    [1,4,5,3,6,2]      
```

예를 들어,주사위를 위로 굴리는 경우(up)
`[2, 4, 1, 3, 5, 6]` 에서 `[6, 4, 2, 3, 1, 5]`로 변경되어야 합니다.

첫번째와 여섯번째 원소를 바꿉니다. `[2, 4, 1, 3, 5, 6]` -> `[6, 4, 1, 3, 5, 2]`

세번째와 여섯번쨰 원소를 바꿉니다. `[6, 4, 1, 3, 5, 2]` -> `[6, 4, 2, 3, 5, 1]`

다섯번째와 여섯번째 원소를 바꿉니다. `[6, 4, 2, 3, 5, 1]` -> `[6, 4, 2, 3, 1, 5]`

이런 방법으로 `down`, `left`, `right`도 똑같이 구현해줍니다.
나머지는 문제 설명대로 똑같이 조건 처리하면 됩니다.

```python
N, M, x, y, K = map(int,input().split())
board = [list(map(int,input().split())) for _ in range(N)]
dir_arr = list(map(int,input().split()))

dx = [0, 0, -1, 1] # 동, 서, 북, 남
dy = [1, -1, 0, 0]

def check(x, y, dir): # 바깥으로 나가는 경우를 제외하기 위해
    new_x = x+dx[dir-1]
    new_y = y+dy[dir-1]
    if (0 <= new_x < N) and (0 <= new_y < M):
        return True

def move(direction, board, dice, x, y):
    if direction == 3: # up
        dice[0], dice[5] = dice[5], dice[0] # 주사위의 첫번째 원소와 여섯번째 원소를 바꾼다
        dice[2], dice[5] = dice[5], dice[2] # 세번쨰와 여섯번째 원소를 바꾼다
        dice[4], dice[5] = dice[5], dice[4] # 다섯번째와 여섯번째 원소를 바꾼다
        x -= 1
        if board[x][y] == 0:
            board[x][y] = dice[2]
        else:
            dice[2] = board[x][y]
            board[x][y] = 0
        return board, dice, x, y

    if direction == 4: # down
        dice[0], dice[2] = dice[2], dice[0]
        dice[2], dice[4] = dice[4], dice[2]
        dice[4], dice[5] = dice[5], dice[4]
        x += 1
        if board[x][y] == 0:
            board[x][y] = dice[2]
        else:
            dice[2] = board[x][y]
            board[x][y] = 0
        return board, dice, x, y

    if direction == 2: # left
        dice[1], dice[5] = dice[5], dice[1]
        dice[2], dice[5] = dice[5], dice[2]
        dice[3], dice[5] = dice[5], dice[3]
        y -= 1
        if board[x][y] == 0:
            board[x][y] = dice[2]
        else:
            dice[2] = board[x][y]
            board[x][y] = 0
        return board, dice, x, y

    if direction == 1: # right
        dice[1], dice[2] = dice[2], dice[1]
        dice[2], dice[3] = dice[3], dice[2]
        dice[3], dice[5] = dice[5], dice[3]
        y += 1
        if board[x][y] == 0:
            board[x][y] = dice[2]
        else:
            dice[2] = board[x][y]
            board[x][y] = 0
        return board, dice, x, y

dice = [0,0,0,0,0,0]
for dir in dir_arr:
    if check(x, y, dir): # 바깥으로 나가지 않는 경우
        board, dice, x, y = move(dir, board, dice, x, y)
        print(dice[5])

```
