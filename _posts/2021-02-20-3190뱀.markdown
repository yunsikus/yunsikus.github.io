---
layout: post
title: "[Python] 3190 뱀"
subtitle: "[Python] 3190 뱀"
categories: Algorithm
tags:  큐 시뮬레이션 simulation queue
comments: true


---
## [3190 뱀](https://www.acmicpc.net/problem/3190)

## 문제
'Dummy' 라는 도스게임이 있다. 이 게임에는 뱀이 나와서 기어다니는데, 사과를 먹으면 뱀 길이가 늘어난다. 뱀이 이리저리 기어다니다가 벽 또는 자기자신의 몸과 부딪히면 게임이 끝난다.

게임은 NxN 정사각 보드위에서 진행되고, 몇몇 칸에는 사과가 놓여져 있다. 보드의 상하좌우 끝에 벽이 있다. 게임이 시작할때 뱀은 맨위 맨좌측에 위치하고 뱀의 길이는 1 이다. 뱀은 처음에 오른쪽을 향한다.

- 뱀은 매 초마다 이동을 하는데 다음과 같은 규칙을 따른다.
- 먼저 뱀은 몸길이를 늘려 머리를 다음칸에 위치시킨다.
- 만약 이동한 칸에 사과가 있다면, 그 칸에 있던 사과가 없어지고 꼬리는 움직이지 않는다.
- 만약 이동한 칸에 사과가 없다면, 몸길이를 줄여서 꼬리가 위치한 칸을 비워준다. 즉, 몸길이는 변하지 않는다.
- 사과의 위치와 뱀의 이동경로가 주어질 때 이 게임이 몇 초에 끝나는지 계산하라.


## 입력
첫째 줄에 보드의 크기 N이 주어진다. (2 ≤ N ≤ 100) 다음 줄에 사과의 개수 K가 주어진다. (0 ≤ K ≤ 100)

다음 K개의 줄에는 사과의 위치가 주어지는데, 첫 번째 정수는 행, 두 번째 정수는 열 위치를 의미한다. 사과의 위치는 모두 다르며, 맨 위 맨 좌측 (1행 1열) 에는 사과가 없다.

다음 줄에는 뱀의 방향 변환 횟수 L 이 주어진다. (1 ≤ L ≤ 100)

다음 L개의 줄에는 뱀의 방향 변환 정보가 주어지는데,  정수 X와 문자 C로 이루어져 있으며. 게임 시작 시간으로부터 X초가 끝난 뒤에 왼쪽(C가 'L') 또는 오른쪽(C가 'D')로 90도 방향을 회전시킨다는 뜻이다. X는 10,000 이하의 양의 정수이며, 방향 전환 정보는 X가 증가하는 순으로 주어진다.
## 출력
첫째 줄에 게임이 몇 초에 끝나는지 출력한다.


## 풀이
이 문제를 풀기 위해서는 다음 2가지를 구현해야 합니다.
1. 방향 수정
2. `queue`에 이동 좌표들을 기록


먼저 방향 수정을 보면, `'D'`와 `'L'`을 받아서 새로운 방향으로 update되어야 합니다.

```python
dx = [0,-1,0,1] # right, up, left, down
dy = [1,0,-1,0]
```
`up`에서 `D` -> `right`
`up`에서 `L` -> `left`  

`down`에서 `D` -> `left`  
`down`에서 `L` -> `right`

`right` 에서 `D` -> `down`
`right` 에서 `L` -> `up`  

`left` 에서 `D` -> `up`
`left` 에서 `L` -> `down`

`D`의 경우 현재 `direction`에서 오른쪽 한칸
`L`의 경우 현재 `direction`에서 왼쪽 한칸으로 가면 된다.

즉 새로운 좌표는 다음과 같다.
```python
# D인 경우
nx = x + dx[(direction+1)%4]
ny = x + dx[(direction+1)%4]
# L인 경우
nx = x + dx[(direction+3)%4]
ny = x + dx[(direction+3)%4]
```

2번의 경우 `collections` 모듈에서 `deque`를 통해 큐 자료구조를 썼습니다. list를 써도 통과할 수 있으나, `queue.leftpop()`의 경우 시간복잡도가 `O(1)`로 리스트에서 원소 삭제에 걸리는 `O(N)`보다 훨씬 빠릅니다.
새로운 좌표에 사과가 없으면 에서 첫번째 요소를 `pop`하고, 사과가 있으면 넘어갑니다.

풀이는 아래와 같습니다.
```python
from collections import deque

N = int(input())
apple_n = int(input())
apple_coord = [list(map(int,input().split())) for _ in range(apple_n)]
turn_n = int(input())
turn_direction = dict()

for _ in range(turn_n): #  {8: 'D', 10: 'D', 11: 'D', 13: 'L'}
    turn, direction = input().split()
    turn_direction[int(turn)] = direction

board = [[0]*N for _ in range(N)] # 사과의 위치를 1로 채운다.
for coord_x, coord_y in apple_coord:
    board[coord_x-1][coord_y-1] = 1

turns = [x[0] for x in turn_direction.items()]  # 방향 수정이 필요한 turn을 list에 담는다.

dx = [0,-1,0,1] # right, up, left, down
dy = [1,0,-1,0]

def start():
    coord = deque()
    coord.append((0,0))
    turn = 0
    x = 0
    y = 0
    direction = 0
    while True:
        ## 방향 수정을 해야되는 경우
        if turn in turns:
            DL = turn_direction[turn]
            if DL == 'L':
                direction = (direction+1)%4
            elif DL == 'D':
                direction = (direction+3)%4

        x = x + dx[direction]
        y = y + dy[direction]

        turn += 1

        # 새로운 좌표가 board를 넘거나
        if (x >= N) or (y >= N) or (x < 0) or (y < 0):
            return

        # 지금 지나고 있는 좌표라면 stop
        if (x,y) in coord:
            return

        # 두 조건 다 해당하지 않으면, 새로운 좌표를 queue에 추가
        coord.append((x,y))

        # 사과를 먹지 않는 경우는 queue에서 제일 처음에 들어왔던 좌표를 삭제한다.
        # 사과를 먹은 경우는 아무 작업도 하지 않는다.
        if board[x][y] != 1:
            coord.popleft() # pop()

        # 사과를 먹은 경우 1을 0으로 리샛시켜준다.
        board[x][y] = 0

print(start())
```
