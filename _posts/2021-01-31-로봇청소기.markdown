---  
layout: post  
title: "[Python]14503 로봇청소기"  
subtitle: "[Python]14503 로봇청소기"  
categories: Algorithm
tags: Algorithm Dfs 시뮬레이션
comments: true  


---  
## 문제
로봇 청소기가 주어졌을 때, 청소하는 영역의 개수를 구하는 프로그램을 작성하시오.

로봇 청소기가 있는 장소는 N×M 크기의 직사각형으로 나타낼 수 있으며, 1×1크기의 정사각형 칸으로 나누어져 있다. 각각의 칸은 벽 또는 빈 칸이다. 청소기는 바라보는 방향이 있으며, 이 방향은 동, 서, 남, 북중 하나이다. 지도의 각 칸은 (r, c)로 나타낼 수 있고, r은 북쪽으로부터 떨어진 칸의 개수, c는 서쪽으로 부터 떨어진 칸의 개수이다.

로봇 청소기는 다음과 같이 작동한다.

- 1. 현재 위치를 청소한다.
- 2. 현재 위치에서 현재 방향을 기준으로 왼쪽방향부터 차례대로 탐색을 진행한다.
  - a. 왼쪽 방향에 아직 청소하지 않은 공간이 존재한다면, 그 방향으로 회전한 다음 한 칸을 전진하고 1번부터 진행한다.
  - b. 왼쪽 방향에 청소할 공간이 없다면, 그 방향으로 회전하고 2번으로 돌아간다.
  - c. 네 방향 모두 청소가 이미 되어있거나 벽인 경우에는, 바라보는 방향을 유지한 채로 한 칸 후진을 하고 2번으로 돌아간다.
  - d. 네 방향 모두 청소가 이미 되어있거나 벽이면서, 뒤쪽 방향이 벽이라 후진도 할 수 없는 경우에는 작동을 멈춘다.

로봇 청소기는 이미 청소되어있는 칸을 또 청소하지 않으며, 벽을 통과할 수 없다.

## 입력
첫째 줄에 세로 크기 N과 가로 크기 M이 주어진다. (3 ≤ N, M ≤ 50)

둘째 줄에 로봇 청소기가 있는 칸의 좌표 (r, c)와 바라보는 방향 d가 주어진다. d가 0인 경우에는 북쪽을, 1인 경우에는 동쪽을, 2인 경우에는 남쪽을, 3인 경우에는 서쪽을 바라보고 있는 것이다.

셋째 줄부터 N개의 줄에 장소의 상태가 북쪽부터 남쪽 순서대로, 각 줄은 서쪽부터 동쪽 순서대로 주어진다. 빈 칸은 0, 벽은 1로 주어진다. 지도의 첫 행, 마지막 행, 첫 열, 마지막 열에 있는 모든 칸은 벽이다.

로봇 청소기가 있는 칸의 상태는 항상 빈 칸이다.

## 출력
로봇 청소기가 청소하는 칸의 개수를 출력한다.

## 풀이
현재 방향을 기준으로 왼쪽 좌표 및 뒤쪽 좌표를 찾아내야함.

현재 위치가 `북(0)`일때 왼쪽은 `서(3)`, `동(1)`일때 왼쪽은 `북(0)`, `남(2)`일때 왼쪽은 `동(1)`, `서(3)`일때 왼쪽은`남(2)`이다.
즉 `(d+3)`를 `4`로 나눈 나머지를 새로운 `d`로 갱신함.  

이때 새로운 좌표는 북동남서 순서대로 `x`, `y`좌표의 변화를 저장해둔 `dx` 와 `dy`를 인덱싱하여 접근할 수 있음.
```python
dx = [-1, 0, 1, 0] #북 동 남 서
dy = [0, 1, 0, -1]
```
예를 들어, 현재 `d=0(북)` 이고 왼쪽 좌표에 청소상태를 확인하고 싶다면, `(d+3)%4` 의 값인 `서(3)`쪽 방향 즉
```python
nx = x + dx[3] # 서
ny = x + dy[3]
```
인 `nx`, `ny` 좌표를 확인.

마찬가지로, 현재 방향을 기준으로 뒤쪽 좌표는 `북(0)`일때 `남(2)`, `동(1)`일때 `서(3)`, `남(2)`일때 `북(0)`, `서(3)`일때 `동(1)`이다.
즉 `(d+2)`를 `4`로 나눈 나머지를 새로운 `d`로 보면 됨.

예를 들어, 현재 `d=0(북)` 이고 뒤쪽 좌표의 청소상태를 확인하고 싶다면, `(d+2)%4` 의 값인 `남(2)`쪽 방향 즉
```python
nx = x + dy[2] # 남
ny = y + dy[2]
```
인 `nx`, `ny` 좌표를 확인.

나머지는 dfs를 통하여 문제에서 정의한 순서 차례대로 구현하면 된다.
1. 현재 매트릭스의 값이 0이면 answer에 1을 더해준다.
2. 현재 방행 기준으로 왼쪽을 확인. 만약 값이 0이면 방향을 변환하고 이동(dfs)
3. 4방향 모두 확인했는데 0값이 발견 안되면, 뒤쪽 좌표를 확인. 만약 벽이면 return
4. 만약 벽이 아니면, 뒤로 이동(dfs)




```python
def dfs(x, y, d):
    global answer
    if not matrix[x][y]:
        answer += 1
        matrix[x][y] = 2

    for _ in range(4):
        d = (d+3)%4
        nx = x + dx[d]
        ny = y + dy[d]
        if not matrix[nx][ny]: # 하나라도 0이 발견되면 다시 그 좌표에서 dfs 시작
            dfs(nx, ny, d)
            return
    nd = (d+2)%4 # 4방향에서 모두 0이 발견 안되면 뒤쪽 좌표 확인
    nx = x + dx[nd]
    ny = y + dy[nd]
    if matrix[nx][ny] == 1: # 만약 뒤쪽이 벽이면 return
        return
    dfs(nx, ny, d) # 뒤쪽이 벽이 아니면 그 방향으로 이당하여 dfs시작

if __name__ == "__main__":   
    m, n = map(int,input().split())
    r, c, d = map(int,input().split())
    matrix = [list(map(int,input().split())) for _ in range(m)]

    dx = [-1, 0, 1, 0]
    dy = [0, 1, 0, -1]
    answer = 0
    dfs(r, c, d)
    print(answer)
```
